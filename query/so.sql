{
  "basket":{
    "byUser"   : "select a.id_product, a.code, coalesce(p.product_name, m.product_name) as product_name, coalesce(c.name,'') customer_name, coalesce(a.id_customer,0) as id_customer, cast(a.qty as integer) as iqty, a.satuan from bi.tb_basket a left outer join tb_m_people c on c.id_people = a.id_customer left outer join tb_product p on p.id_product = a.id_product and a.satuan = 'MC' left outer join tb_m_mco m on m.id_mco = a.id_product and a.satuan = 'PAC' where a.userid = $1 and a.id_product<>0 order by field_id",
    "addBasket": "select bi.add_basket(${par.userid}, ${par.id_product}, ${par.qty}, ${par.code}, ${par.satuan}, ${par.id_customer});",
    "delBasket": "delete from bi.tb_basket where userid = ${par.userid} and id_product = ${par.id_product} RETURNING 'Deleted' as status;",
    "setQty"   : "update bi.tb_basket set qty = ${par.qty} where userid = ${par.userid} and id_product = ${par.id_product} RETURNING 'Updated' as status;",
    "setCustomer": "update bi.tb_basket set id_customer = ${par.id_customer} where userid = ${par.userid} RETURNING id_customer;"    
  },
  "order":{
    "genQuotation"   : "select bi.gen_quotation(${par.userid}, ${par.shipdate}::date, ${par.notex});",
    "quotationbydate": "select to_char(tgl, 'DD') tg, to_char(tgl, 'MON') bln, * from ( select distinct userid, nomor, tgl, shipment_dt, istatus, (select name from tb_m_people where id_people=a.id_customer) customer from bi.tb_quotation a where userid in (select public.getslssubor_unm(${par.userid})) and tgl between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp ) b where cast(lower(customer) as varchar) like ${par.customer} order by nomor desc",
    "quotationdetail": "select to_char(coalesce(amt,0), 'FM999G999G999D00') samt, to_char(coalesce(tot_amt,0), 'FM999G999G999D00') stot_amt, to_char(coalesce(tot_qty,0), 'FM999G999G999') stot_qty, b.* from (select nomor, tgl, shipment_dt, istatus, (select name from tb_m_people where id_people=a.id_customer) customer, coalesce(p.product_name, m.product_name) as product_name, qty, case when matype=1 then 'MC' else 'PAC' end satuan, notes, case when matype=1 then get_fglocalprice(a.id_product, id_customer)*qty else 0 end as amt, sum(coalesce(qty, 0)) over () tot_qty, sum(case when matype=1 then get_fglocalprice(a.id_product, id_customer)*qty else 0 end) over () tot_amt from bi.tb_quotation a left outer join tb_product p on p.id_product = a.id_product and a.matype = 1 left outer join tb_m_mco m on m.id_mco = a.id_product and a.matype = 2 where a.nomor= ${par.nomor} order by field_id) b",
    "setquotationstat": "update bi.tb_quotation set istatus = -1 where nomor = ${par.nomor} RETURNING nomor;",
    "stockByLoc"     : "select * from bi.gen_stockbyid(${par.matype}, ${par.idproduct})",
    "copyQuotation"  : "select bi.copy_quotation(${par.userid}, ${par.nomor});",
    "quotationbyproduct": "select product_name, qty, satuan, max(mc) over() mc, max(pac) over() pac from (select a.*,COALESCE(sum(qty) filter (where satuan = 'MC')over(partition by satuan),0)::int mc, COALESCE(sum(qty) filter (where satuan = 'PAC')over(partition by satuan),0)::int pac from (select coalesce(p.product_name, m.product_name) as product_name, sum(qty)::int as qty, case when matype=1 then 'MC' else 'PAC' end satuan from bi.tb_quotation a left outer join tb_product p on p.id_product = a.id_product and a.matype = 1 left outer join tb_m_mco m on m.id_mco = a.id_product and a.matype = 2 where istatus='1' and tgl between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp and upper(a.userid) in (select getslssubor_unm(${par.salesid})) group by a.matype, a.id_product, p.product_name, m.product_name) a) b order by 1",
    "salesOrder"     : "select so_id, to_char(so_date, 'DD') tg, to_char(so_date, 'MON') bln, so_no, to_char(coalesce(total_price,0), 'FM999G999G999D00') samt, (select name from tb_m_people where id_people=customer_id), b.slsgrp_id from tb_salesorder_m a left join tb_m_customersdata b on a.customer_id = b.id_people where b.slsgrp_id in (select getslsareacvrg_id(${par.userid})) and so_date between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp order by so_date desc",
    "salesOrderDtl" : "select b.name, b.address, b.city, b.cellphone, (case coalesce(a0.rep_id, 0) when 0 then (b.address || ', ' || b.city) when 9999 then coalesce(a0.txt_tmpdlvaddr, '') else (b1.rep_addr || ', ' || b1.rep_city) end) as delv_address, a0.so_date, a0.so_no, a0.shipping_dt, a0.no_op as no_po, (case coalesce(a0.payment_method, 0) when 0 then 'CASH' else 'TRANSFER BY BANK (' || a0.payment_term::varchar || ' hari)' end) as top, b2.slsman_nm as sales, a0.so_info, a0.disc_p, a0.disc_v, a0.so_ppnv, a0.total_price as grand_total, c.product_id, c.product_name, case coalesce(a.pack_type, 0) when 0 then a.so_qty when 1 then a.so_qtypck end as qtyso, case coalesce(a.pack_type, 0) when 0 then 'MC' when 1 then 'PAC' end as packing, a.sub_total from tb_salesorder_d_item a left join tb_salesorder_m a0 on a.so_id = a0.so_id left join tb_m_people b on a0.customer_id = b.id_people left join tb_representative b1 on a0.customer_id = b1.id_people and coalesce(a0.rep_id, 0) = b1.rep_id left join tb_m_slsman b2 on a0.asgn_by = b2.slsman_id left join vw_product c on a.id_barang = c.id_product and coalesce(a.pack_type, 0) = c.pcktype where coalesce(a0.so_type, '') in ('', 'L', 'S') and a.so_id = 40811 order by a0.so_no, a0.so_date, b.name, c.product_id, c.product_name"
  },
  "delivery":{
    "getListDO": "select to_char(sj_date, 'DD') tg, to_char(sj_date, 'MON') bln, x.sjmd_no, x.name, x.sopir from ( select a.sj_date, d.do_no, a.sj_id, a.sj_no, b.sjmd_no, c.name, replace(upper(d.driver_nm), 'PAK ','') sopir, d.driver_id, d.do_info from public.tb_ls_suratjalan_m as a left outer join public.tb_ls_suratjalan_md as b on a.sj_id = b.sj_id left outer join public.tb_m_people as c on b.id_people = c.id_people left outer join public.tb_delvorder_m as d on a.do_id = d.do_id where sj_date between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp ) x where cast(sjmd_no||' '||name||' '||sopir||' '||do_info as varchar) ilike ${par.customer} order by sj_date desc, sjmd_no asc",
    "getDetailDO": "select sj_id, sj_seq, id_product, (sj_qty+sj_qtypck) qty, case when pack_type=0 then 'MC' else 'PAC' end as satuan, (select product_cd from bi.get_productbyid(id_product,case when pack_type=0 then 1 else 2 end)) code, (select product_nm from bi.get_productbyid(id_product,case when pack_type=0 then 1 else 2 end)) product_nm from tb_ls_suratjalan_d where sj_id = (select sj_id from tb_ls_suratjalan_md where sjmd_no=${par.nomor}) order by sj_seq",
    "getPhoto": "select field_id as baris, image from tb_photo a where modul = ${par.modul} and sid = ${par.number} union all select 0 as baris, image from tb_photo a where modul = 'IMGBLANK' order by 1 desc",
    "addPhoto": "insert into tb_photo(modul, sid, image, userid) values (${par.modul}, ${par.number}, ${par.photo}, ${par.uid});",
    "delPhoto": "delete from tb_photo where field_id = ${par.fid};",
    "setDelivered" : "insert into tb_logs(tgl, modul, notes, ivalue, userid) values (current_timestamp, 'DO_DOC', ${par.notes}, 1, ${par.userid}) RETURNING ${par.notes} as nomor;",
    "dofStatus" : "select coalesce(ivalue,0) status from tb_logs where modul='DO_DOC' and notes= $1 order by tgl desc limit 1",
    "setdofnote": "update tb_ls_suratjalan_md set notes= ${par.notes} where sjmd_no = ${par.dof}",
    "getdofnote": "select coalesce(notes,'') dofnote from tb_ls_suratjalan_md where sjmd_no = ${par.nomor}"
  },
  "visit": {
    "getListVisit_old": "select to_char(tanggal, 'yyyy-mm-dd HH24:MI:SS') tgl, photo, userid, status from tb_sales_visit where status in ('CHECK IN','CHECK OUT') and tanggal between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp order by tanggal desc",
    "getListVisit": "select nomor, userid, to_char(min(tanggal), 'yyyy-mm-dd') tgl, max(case when status = 'CHECK IN' then to_char(tanggal, 'yyyy-mm-dd HH24:MI:SS') else '-' end) checkin, max(case when status = 'CHECK OUT' then to_char(tanggal, 'yyyy-mm-dd HH24:MI:SS') else '-' end) checkout, to_char(max(tanggal) - min(tanggal), 'HH24:MI:SS') durasi, (select id_customer from tb_visit_plan where nomor = a.nomor) id_customer, (select islead from tb_visit_plan where nomor = a.nomor) islead from tb_sales_visit a where status in ('CHECK IN','CHECK OUT') and tanggal between ${par.start_dt}::date and (${par.end_dt}::date||' 23:59:59')::timestamp group by nomor, userid order by nomor desc",
    "visitStatus" : "select visit_status(${par.userid}, ${par.nomor}) as stat;",
    "checkinout": "select addvisit(${par.userid}, ${par.photo}, ${par.lat}, ${par.long}, ${par.address}, ${par.notes}, ${par.status}, ${par.nomor});",
    "getVisitPlan": "select nomor, salesid, tanggal, id_customer, islead, case when islead=0 then (select name from tb_m_people where id_people = a.id_customer) when islead=1 then (select name from tb_leads where id_people = a.id_customer) end as scustomer from tb_visit_plan a where to_char(tanggal,'yyyymm') = ${par.periode} order by tanggal",
    "addVisitPlan": "select gen_visitplan(${par.salesid}, ${par.tanggal}, ${par.id_customer}, ${par.created_by}, ${par.islead}) as nomor",
    "visitDetail":"select coalesce(inpic,'-') inpic, coalesce(outpic,'-') outpic, coalesce(notes,'-') notes from (select (select photo from tb_sales_visit where status = 'CHECK IN' and nomor = ${par.nomor}) inpic, (select photo outpic from tb_sales_visit where status = 'CHECK OUT' and nomor = ${par.nomor}), (select notes from tb_sales_visit where status = 'CHECK OUT' and nomor = ${par.nomor})) a"
  },
  "attendance": {
    "getAttendance": "select trim(left(to_char(a.tgl, 'DAY'),3)) hari, to_char(a.tgl, 'DD') tg, to_char(a.tgl, 'Mon') bln, coalesce(to_char(time_in, 'HH24:MI'),'') masuk, coalesce(to_char(time_out, 'HH24:MI'),'') pulang, '' status from (select * from generate_series(cast(${par.start_dt} as date), cast(${par.end_dt} as date), '1 day') as tgl) a left outer join (select tgl, time_in, time_out, status from bi.tb_attendance where id_sales = ${par.idpeople} and tgl between ${par.start_dt} and ${par.end_dt} ) b on cast(b.tgl as date)=cast(a.tgl as date) order by a.tgl desc", 
    "attStatus" : "select bi.att_status(${par.idpeople}) as stat;",
    "addAbsensi": "select bi.add_absensi(${par.idpeople}, ${par.userid}, ${par.photo}, ${par.lat}, ${par.long}) as stat;"
  },
  "leads": {
    "getLeads": "select x.* from ( select 1 islead, id_people, name, address, phone, email from bi.tb_leads union all select 0 islead, a.id_people, name, address, phone, email from tb_m_people a left join tb_m_customersdata b on a.id_people = b.id_people where is_customer = '1' and active_stat = 'Active' and name not like '%**' and b.slsgrp_id in (select getslsareacvrg_id(${par.user})) ) x where name ilike ${par.txt} order by name",
    "getLeadsById": "select * from bi.tb_leads where id_people = ${par.idpeople}",
    "addLeads": "insert into bi.tb_leads(id_people, name, address, lat, lng, phone, email, userid, last_update) values ((select coalesce(max(id_people), 0) + 1 from bi.tb_leads), ${par.name}, ${par.address}, ${par.lat}, ${par.long}, ${par.phone}, ${par.email}, ${par.userid}, current_timestamp) returning id_people;",
    "updateLeads" : "update bi.tb_leads set address = ${par.address}, phone = ${par.phone}, email = ${par.email} where id_people = ${par.idpeople} returning id_people;"
  }
}
